---

- include_vars: ../../../group_vars/tag_db_server.yml

#- name: Install the Cloudera Manager Server Packages
#  yum: name={{ item }} state=installed
#  with_items:
#    - cloudera-manager-daemons
#    - cloudera-manager-server
#    - cloudera-manager-agent



- name: Install Cloudera Manager Server
  yum: name={{ item }} state=present
  with_items:
    - http://archive.cloudera.com/cm5/redhat/7/x86_64/cm/5.11/RPMS/x86_64/cloudera-manager-daemons-5.11.2-1.cm5112.p0.6.el7.x86_64.rpm
    - http://archive.cloudera.com/cm5/redhat/7/x86_64/cm/5.11/RPMS/x86_64/cloudera-manager-agent-5.11.2-1.cm5112.p0.6.el7.x86_64.rpm
    - http://archive.cloudera.com/cm5/redhat/7/x86_64/cm/5.11/RPMS/x86_64/cloudera-manager-server-5.11.2-1.cm5112.p0.6.el7.x86_64.rpm


- set_fact:
    db_hostname={{ hostvars[item].ansible_default_ipv4.address }}
  with_items: "{{ groups['tag_db_server'] }}"


- set_fact:
    scm_hostname={{ hostvars[item].ansible_default_ipv4.address }}
  with_items: "{{ groups['tag_scm_server'] }}"


- name: Prepare Cloudera Manager Server External Database
  command: /usr/share/cmf/schema/scm_prepare_database.sh
             -f
             --host {{ db_hostname }}
             mysql {{ databases.scm.name }} {{ databases.scm.user }} {{ databases.scm.pass }}
  changed_when: False



- name: Start the Cloudera Manager Server
  service: name={{ item }} state=restarted enabled=yes
  with_items:
    - cloudera-scm-server
    - cloudera-scm-agent


- pause:
    minutes: 1


# Trigger handler to wait for SCM to startup
- meta: flush_handlers

- name: Get Cloudera Manager API version
  uri:
#    url: http://{{ hostvars[groups['tag_scm_server'][0]]['inventory_hostname'] }}:{{ scm_port }}/api/version
    url: http://{{ hostvars[scm_hostname]['inventory_hostname'] }}:{{ scm_port }}/api/version
    method: GET
    status_code: 200
    user: "{{ scm_default_user }}"
    password: "{{ scm_default_pass }}"
    force_basic_auth: yes
    return_content: yes
  register: result

# Set base CM API URL
- set_fact: cm_api_url="http://{{ hostvars[scm_hostname]['inventory_hostname'] }}:{{ scm_port }}/api/{{ result.content }}"
#- set_fact: cm_api_url="http://{{ hostvars[groups['tag_scm_server'][0]]['inventory_hostname'] }}:{{ scm_port }}/api/{{ result.content }}"
- debug: var=cm_api_url


- name: get hostname
  raw: >
    curl -k -u "{{ scm_default_user  }}:{{ scm_default_pass }}" -L "{{ hostvars[groups['tag_scm_server'][0]]['inventory_hostname']  }}:{{ scm_port  }}"/api/v16/hosts  | jq -r  '.items | map(.hostname) | join("\n")' |  sed 's/.evico.nbs//g' |  sed -n '/dn/p'
  delegate_to: localhost
  register: scm_host_names
- debug: var=scm_host_names



- name: get host_id
  raw: >
    curl -k -u "{{ scm_default_user }}:{{ scm_default_pass }}" -L "{{ hostvars[groups['tag_scm_server'][0]]['inventory_hostname'] }}:{{scm_port}}"/api/v16/hosts | jq -r  '.items | map(.hostId) | join("\n")'
  delegate_to: localhost
  register: scm_host_ids
- debug: var=scm_host_ids

#- set_fact: scm_host_names="{{ scm_hosts_result.host_names }}"
#- debug: var=scm_host_names

- include: license.yml
- include: scm.yml
- include: cms.yml
