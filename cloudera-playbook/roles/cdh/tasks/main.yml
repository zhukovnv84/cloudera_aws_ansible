---

- include_vars: ../../../group_vars/tag_cdh_servers.yml
- include_vars: ../../../group_vars/tag_scm_server.yml
- include_vars: ../../../group_vars/tag_db_server.yml

#- debug: var=ansible_facts



- file:
    path: "{{ tmp_dir }}/cluster.json"
    state: absent
  delegate_to: localhost

- set_fact:
    scm_hostname={{ hostvars[item].ansible_default_ipv4.address }}
  with_items: "{{ groups['tag_scm_server'] }}"


- name: Get Cloudera Manager API version
  uri:
    url: http://{{ hostvars[scm_hostname]['inventory_hostname'] }}:{{ scm_port }}/api/version
    method: GET
    status_code: 200
    user: "{{ scm_default_user }}"
    password: "{{ scm_default_pass }}"
    force_basic_auth: yes
    return_content: yes
  register: result

- set_fact: cm_api_url="http://{{ hostvars[scm_hostname]['inventory_hostname'] }}:{{ scm_port }}/api/{{ result.content }}"
- debug: var=cm_api_url


- name: Check whether cluster exists
  uri:
    url: "{{ cm_api_url }}/clusters/{{ cluster_display_name }}"
    method: GET
    status_code: 200,404
    force_basic_auth: yes
    user: "{{ scm_default_user }}"
    password: "{{ scm_default_pass }}"
    return_content: yes
  register: clusters_resp

- set_fact: cluster_exists={{ 'True' if clusters_resp.status == 200 else 'False' }}
- debug: msg="Cluster '{{ cluster_display_name }}' exists - {{ cluster_exists }}"






- name: Prepare cluster template
  template:
    src: "cluster.j2"
    dest: "{{ tmp_dir }}/cluster.json"
#  when: cluster_exists == False
  delegate_to: localhost
  





- name: Import cluster template
  uri:
    url: "{{ cm_api_url }}/cm/importClusterTemplate?addRepositories=true"
    method: POST
    body_format: json
    body: "{{ lookup('file', ''+ tmp_dir + '/cluster.json') }}"
    status_code: 200
    force_basic_auth: yes
    user: "{{ scm_default_user }}"
    password: "{{ scm_default_pass }}"
    return_content: yes
  register: template_resp
  when: cluster_exists == False
  delegate_to: localhost



- debug: var=template_resp
  when: cluster_exists == False

- set_fact: command_id="{{ template_resp.json.id }}"
  when: cluster_exists == False

- debug: msg="Import cluster template command ID - {{ command_id }}"
  when: cluster_exists == False

- debug: msg="Login to Cloudera Manager to monitor import progress - http://{{ hostvars[scm_hostname]['inventory_hostname'] }}:{{ scm_port }}/cmf/commands/commands"
  when: cluster_exists == False




- name: SMOKE BAMBUK 10 MINS, give parsels distributed all around world and apply roles
  shell: time

- pause:
    minutes: 10
